#/bin/python3

import argparse,os

from Features.Task.main import tasks_manager
from utility.Context import context
from VarlaLib import *
import enum
from dotenv import load_dotenv


MainParser=argparse.ArgumentParser(prog="Varla-CLI",description="Varla ...")
MainParser.add_argument("-v","--verbose",dest="verbosity", action="store_true",help="Echos background actions in terminal.",)
MainParser.add_argument("-q","--quite", action="store_true",help="Echos only the result of action if any in terminal.",)
MainParser.add_argument("-hb","--heartbeat", action="store_true",help="Echos only the result of action if any in terminal.",)



Commands = MainParser.add_subparsers(description="hiih hih i hih",title="Commands")

Tasks = Commands.add_parser('tasks', help = "Tasks API",)
Tasks.add_argument("-t",'--tasks',metavar="",dest = "tasks",default="1",type=bool, help = 'all')

Create = Commands.add_parser('create', help = "",)

Add = Commands.add_parser('add', help = "")

Modify = Commands.add_parser('modify', help = "")

Server = Commands.add_parser('server', help = "")



# TaskParser = Task.add_parser('Task', help = "")
# Create.add_argument("-e",'--extra',metavar="",dest = "test", help = 'Other commands')

## Add nargs="*" for zero or more other commands
# MainParser.add_argument('extra', nargs = "*", help = 'Other commands')




def parse_command(command:str):
    command = command.lower().split(" ")
    
    if   command[0] in ["-h","--help","help","opt","options"]:  os.system("python3 Varla -h")
    elif command[0] in ["-q","--quite","quite"]:                set_verbosity(Verbosity.QUITE)
    elif command[0] in ["-v","--verbose","verbose"]:            set_verbosity(Verbosity.VERBOSE)
    elif command[0] in ["-n","--normal","normal"]:              set_verbosity(Verbosity.NORMAL)
    elif command[0] in ["-hb","--heartbeat","heartbeat"]:       heartbeat()
    elif command[0] in ["history"]:                             history()
    elif command[0] in ["tasks"]:                               tasks_manager()


    elif command[0] in ["exit","bye"]:
        say("Goodbye boss!")
        exit()

    elif command[0] in ["hello","hi","hey","hello varla","hi varla","hey varla"]:
        say("Hello boss!")
    
    elif command[0] in ["clear","clr"]:
        clear()
    elif command[0] in ["--flags","flags"]:
        print(context.flags)
    else :
        if command[0]:
            say(f"Sorry boss, I don't know what does '{' '.join(command)}' means!")
            # confirm = ask(f"Sorry boss, I don't know what does '{command[0]}' mean!\n\t Do you want me to add it to 'To be developed' task? [Y/n]")
            # if confirm.lower().startswith("y"):
            #     say("Added!")
            # else: 
            #     say("Got it boss")

    

if __name__ == "__main__":

    load_dotenv()

    context.args = MainParser.parse_args()
    # print(context.args)
    
    say("Yes boss!")
    say("How can I help you?")

    while(True):
        command = ask()
        parse_command(command)

    create_task()


#### RULES ####
# Every command should support --verbose
# Every command should work with args or in interactive terminal
